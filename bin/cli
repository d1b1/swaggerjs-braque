#!/usr/bin/env node

var _ = require('underscore')
    , async = require('async')
    , request = require('request')
    , url = require('url')
    , fs = require('fs');

// CLI Arguments

var argv = require('optimist')
    .usage('CLI build a Swagger API Route file from a URL.\nUsage: $0')
    .demand(['u'])
    .alias('u', 'url').describe('u', 'Resource URL')
    .alias('f', 'file').describe('f', 'Output file')
    .alias('p', 'path').describe('p', 'Optional URL Path')
    .alias('d', 'debug').describe('d', 'Debug')
    .argv
;

var baseurl = argv.url + '/api-docs'
var g = []

// Request the Swagger Route api-docs file.
request(baseurl, function (error, response, body) {
  if (!error && response.statusCode == 200) {
    var j = JSON.parse(body)
    var apis = []
    g = j.apis;

    async.forEach(j.apis, function(o, cb) {
       var u = (j.basePath == '/' ? argv.url : j.basePath).replace(argv.path, '') + o.path

       request(u, function (error, response, body) {
         try {
            apis.push(JSON.parse(body))
         } catch(err) {
           console.log('err in Parse', err)
         }
         cb(null)
       })
    }, function(err) {
      build(apis)
    })
  }

})

var build = function(apis) {
  
  var basePath = url.parse(argv.url)
  var container = {}

  container.defines = {
    constants: {
       name: basePath.host,
       description: "",
       protocal: basePath.protocol.replace(":", ""),
       host: basePath.host,
       port: basePath.port,
       requestFormat: "json"
    },
    "response-headers": [
        "X-RateLimit-Limit",
        "X-RateLimit-Remaining",
        "X-Oauth-Scopes", "Link" 
    ]
  }

  var i = 0;
  _.each(apis, function(api) {
      i++
      var name = api.resourcePath.replace('/', '')
      var methods = {} 
      _.each(api.apis, function(o) {
        _.each(o.operations, function(op){
            methods[_makeName(op.summary)] = ({
              url: _makeUrl(o.path),
              method: op.httpMethod,
              params: _makeParams(op.parameters)
            })
        }) 
      })
      container[name] = methods
  })

  if (argv.file) {
      fs.writeFile(argv.file, JSON.stringify(container, null, 4), function(err) {
        if(err) {
            console.log(err);
        } else {
            console.log("New Route file: " + argv.file);
        }
      }); 
  } else {
    // Dump to StdOut when no file provided.
    console.log(JSON.stringify(container, null, 4))
  }

}

_makeName = function(name) {

  return name.toLowerCase().split(' ').join('-').replace('.', '');

}

// Simple helper to convert the Swagger /{id} parameter format
// to a braque model of using :id. Long term Braque should be 
// open to different url formats.

_makeUrl = function(path) {

  var p = '';
  _.each(path, function(c) {
    if (c == '}') return
    if (c == '{') return p = p + ':'
    p = p + c
  })

  return argv.path + p
}

// Simple helper to loop the parameters and
// build a parameters array for the URl endpoint.

_makeParams = function(parameters) {

  var params = {};
  _.each(parameters, function(x) {
    var p = {
      type: "String",
      required: x.required,
      validation: "",
      invalidmsg: "",
      description: x.description
    }
    params[x.name] = p
  })

  return params
}